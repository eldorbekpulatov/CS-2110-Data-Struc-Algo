This is Wenyuan Ma, grading your A3. We grade in three steps:

1. A grading program tests each method for correctness. Its output is at the end of this file.
I may give you a few comments on what was wrong with your methods, but the output of
the testing program is the main thing for you to look at.

I truncate the value given by the grading program toward zero and place it in the grading
table below.

Step 2. I make sure that your getNode is done properly.

Step 3. I look through your JUnit testing class to make sure you have suitable test cases
and that each one is tested properly. Methods that change the list must be tested using
toString(), toStringRev(), and size() as discussed in the A3 handout. For a method that is
a function, the returned value must be tested.

I check to make sure that your methods are tested appropriately. Remember, enough test cases
must be used so that each part of a method is tested in at least one test case.
For example, because of the nature of the code in remove(...), these tests should be done:
(1) remove the only node of a 1-element list, (2) remove the first node of a list with at
least two nodes, (3) remove a node other than the first.

Grading table:
 1. Grade given by grading program:    65 out of  65
 2. Efficiency of getNode:              5 out of   5
 3. Testing                            29 out of  30
 Total:                                99 out of 100
Deductions:                             1
Total:                                 99


Testing:
Deduction 1. Your testing of remove(int) is insufficient. You need tests for 
removing a node other than the first.



Executing Testing Method test10Constructor
Test the constructor.
Testing List    should be []
Testing Reverse should be []
Testing Size    should be 0
Passed 3.00 out of 3.00 tests
Test method test10Constructor score: 2.00 out of 2.00

Executing Testing Method test20ToStringReverse
Test toStringReverse on these lists: [], [5], [5, 6], [5, 6, 7].
Testing reverse should be []
Testing reverse should be [5]
Testing reverse should be [6, 5]
Testing reverse should be [7, 6, 5]
Passed 4.00 out of 4.00 tests
Test method test20ToStringReverse score: 10.00 out of 10.00

Executing Testing Method test30Append
Test append(5), append(7), and append(9).
Testing List    should be [5]
Testing Reverse should be [5]
Testing Size    should be 1
Testing List    should be [5, 7]
Testing Reverse should be [7, 5]
Testing Size    should be 2
Testing List    should be [5, 7, 9]
Testing Reverse should be [9, 7, 5]
Testing Size    should be 3
Passed 9.00 out of 9.00 tests
Test method test30Append score: 10.00 out of 10.00

Executing Testing Method test40Prepend
Test prepend(5), prepend(7), prepend(9), and prepend(6).
Testing List    should be [5]
Testing Reverse should be [5]
Testing Size    should be 1
Testing List    should be [7, 5]
Testing Reverse should be [5, 7]
Testing Size    should be 2
Testing List    should be [9, 7, 5]
Testing Reverse should be [5, 7, 9]
Testing Size    should be 3
Testing List    should be [6, 9, 7, 5]
Testing Reverse should be [5, 7, 9, 6]
Testing Size    should be 4
Passed 12.00 out of 12.00 tests
Test method test40Prepend score: 10.00 out of 10.00

Executing Testing Method test50GetNode
Test getNode(0) with list [9].
Testing Call d.getNode(0).value
Test getNode(0), ..., getNode(9) with list [9, 8, ..., 0].
Testing Call getNode(0).value
Testing Call getNode(1).value
Testing Call getNode(2).value
Testing Call getNode(3).value
Testing Call getNode(4).value
Testing Call getNode(5).value
Testing Call getNode(6).value
Testing Call getNode(7).value
Testing Call getNode(8).value
Testing Call getNode(9).value
Test getNode(0), ..., getNode(8) with list [8, ..., 0].
Testing Call getNode(0).value
Testing Call getNode(1).value
Testing Call getNode(2).value
Testing Call getNode(3).value
Testing Call getNode(4).value
Testing Call getNode(5).value
Testing Call getNode(6).value
Testing Call getNode(7).value
Testing Call getNode(8).value
Testing get(-1) on a 9-element list
Testing get(9) on a 9-element list
Passed 22.00 out of 22.00 tests
Test method test50GetNode score: 10.00 out of 10.00

Executing Testing Method test60InsertAfter
Test insertAfter(7, first) with list [5].
Testing List    should be [5, 7]
Testing Reverse should be [7, 5]
Testing Size    should be 2
Test insertAfter(9, first) with list [6, 7].
Testing List    should be [6, 9, 7]
Testing Reverse should be [7, 9, 6]
Testing Size    should be 3
Test insertAfter(6, first) with list [4, 9, 7].
Testing List    should be [4, 6, 9, 7]
Testing Reverse should be [7, 9, 6, 4]
Testing Size    should be 4
Test insertAfter(2, last) with list [4, 9, 7, 8].
Testing List    should be [4, 9, 7, 8, 2]
Testing Reverse should be [2, 8, 7, 9, 4]
Testing Size    should be 5
Passed 12.00 out of 12.00 tests
Test method test60InsertAfter score: 11.00 out of 11.00

Executing Testing Method test70Remove
Testing List    should be []
Testing Reverse should be []
Testing Size    should be 0
Testing List    should be [7]
Testing Reverse should be [7]
Testing Size    should be 1
Testing List    should be [6]
Testing Reverse should be [6]
Testing Size    should be 1
Testing List    should be [1, 3, 7, 9]
Testing Reverse should be [9, 7, 3, 1]
Testing Size    should be 4
Passed 12.00 out of 12.00 tests
Test method test70Remove score: 12.00 out of 12.00

Total Score: 65.00 out of 65.00
