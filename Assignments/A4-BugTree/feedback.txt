Grading Comment: Submitted by djg17 on March 27, 2017 02:39PM
Hello, this is gries (gries), grading your A4 It is graded in two steps. We run a program that checks 5 to 12 test cases for each of the methods you had to write --the test cases that we think are needed to know that the method is correct. The program awards points for each test case that passes Output of the testing program appears at the end of this file, along with your grade. If the correctness grade is >= 95, you probably won't get any other feedback. If is it < 95, you may have some feedback to help you understand the methods, to discuss the grade, and perhaps to give some other comments. Below, you will see things like Call A.add(A, B). Whenever a name like 'A' appears where a BugTree is expected, it stands for the subtree with 'A' as the Human in the root. ------------------------- Starting automatic testing of A4, BugTree. Testing Add().. Created tree dt with root A Call A.add(A, B). Ok. Tests pass Call A.add(A, C). Ok. Tests pass Call A.add(A, D). Ok. Tests pass Call D.add(B, E). Ok. Tests pass Call A.add(C, F). Ok. Tests pass Trying invalid Additions. These should throw IllegalArgumentException Add null people...Ok. Tests pass Add with parent that isn't in tree...Ok. Tests pass Add with child that is already in tree...Ok. Tests pass Done testing add. Tests passed: 8/8 Testing size()... Created tree A [B [E F [G]] C [H I] D] Call A.size(). ok Call B.size(). ok Call F.size(). ok Call G.size(). ok Call C.size(). ok Call D.size(). ok Done testing size. Tests passed: 6/6 Testing depthOf(..)... Created tree A [B [E F [G]] C [H I] D] Call A.depthOf(A). ok Call A.depthOf(B). ok Call A.depthOf(G). ok Call B.depthOf(G). ok Call B.depthOf(B). ok Call A.depthOf(X). ok Call E.depthOf(D). ok Done testing depthOf. Tests passed: 7/7 Testing widthAtDepth(..)... Created tree A [B [E F [G]] C [H I] D] Call A.widthAtDepth(0). ok Call A.widthAtDepth(1). ok Call A.widthAtDepth(2). ok Call A.widthAtDepth(3). ok Call A.widthAtDepth(9). ok Call B.widthAtDepth(0). ok Call B.widthAtDepth(1). ok Call A.widthAtDepth(-5). Failed test - class java.lang.NoClassDefFoundError Done testing widthAtDepth. Tests passed: 7/8 Testing bugRouteTo(..)... Created tree A [B [E F [G]] C [H I] D] Call A.bugRouteTo(A). ok Call A.bugRouteTo(B). ok Call A.bugRouteTo(G). ok Call B.bugRouteTo(G). ok Call A.bugRouteTo(X). ok Call B.bugRouteTo(A). ok Call B.bugRouteTo(C). ok Done testing bugRouteTo. Tests passed: 7/7 Testing sharedAncestorOf(..)... Created tree A [B [E F [G]] C [H I] D] Call A.sharedAncestorOf(A, A). ok Call A.sharedAncestorOf(B, A). ok Call A.sharedAncestorOf(B, C). ok Call A.sharedAncestorOf(E, F). ok Call A.sharedAncestorOf(F, G). ok Call B.sharedAncestorOf(E, G). ok Call A.sharedAncestorOf(B, X). ok Call B.sharedAncestorOf(E, C). ok Done testing sharedAncestorOf. Tests passed: 8/8 Testing equals(..)... Create tree dt = {A} Call dt.equals(dt). ok Call dt.equals(null). ok Create tree dt2 = {A} Create tree dt3 = {B} Add child to dt, now dt = {A [B]} Call dt.equals(dt3). Comparison failure - expected false, got true Add child to dt2, now dt2 = {A [B]} Call dt.equals(dt2). ok Add child to dt, now dt = {A [B C]} Call dt.equals(dt2). ok Add child to dt2, now dt2 = {A [B D]} Call dt.equals(dt2). Comparison failure - expected false, got true Add child to dt and dt2, now dt = {A [B C D]}, dt2 = {A [B C D]} Call dt.equals(dt2). ok Add child to dt, now dt = {A [B [E] C D]} Call dt.equals(dt2). Comparison failure - expected false, got true Call dt.equals('AString') ok Done testing equals. Tests passed: 6/9 Testing completed. Points Scored: add(..) - 15.00 of 15 size() - 7.00 of 7 depthOf(..) - 15.00 of 15 widthAtDepth(..) - 10.50 of 12 getBugRouteTo(..) - 17.00 of 17 sharedAncestorOf(..) - 15.00 of 15 equals(..) - 12.67 of 19 Total: - 92 of 100 Deductions: Total: - 92 of 100